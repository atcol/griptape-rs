/*
 * Griptape Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-09-19
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpanDetail {
    #[serde(rename = "span_id")]
    pub span_id: String,
    #[serde(rename = "trace_id")]
    pub trace_id: String,
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "start_time")]
    pub start_time: String,
    #[serde(rename = "end_time")]
    pub end_time: String,
    #[serde(rename = "status")]
    pub status: models::SpanStatus,
    #[serde(rename = "attributes", deserialize_with = "Option::deserialize")]
    pub attributes: Option<serde_json::Value>,
    #[serde(rename = "events")]
    pub events: Box<models::ObservabilityEvent>,
}

impl SpanDetail {
    pub fn new(span_id: String, trace_id: String, name: String, start_time: String, end_time: String, status: models::SpanStatus, attributes: Option<serde_json::Value>, events: models::ObservabilityEvent) -> SpanDetail {
        SpanDetail {
            span_id,
            trace_id,
            parent_id: None,
            name,
            start_time,
            end_time,
            status,
            attributes,
            events: Box::new(events),
        }
    }
}

