/*
 * Griptape Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-09-19
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateAssistantRequestContent {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    #[serde(rename = "knowledge_base_ids", skip_serializing_if = "Option::is_none")]
    pub knowledge_base_ids: Option<Vec<String>>,
    #[serde(rename = "ruleset_ids", skip_serializing_if = "Option::is_none")]
    pub ruleset_ids: Option<Vec<String>>,
    #[serde(rename = "structure_ids", skip_serializing_if = "Option::is_none")]
    pub structure_ids: Option<Vec<String>>,
}

impl CreateAssistantRequestContent {
    pub fn new(name: String) -> CreateAssistantRequestContent {
        CreateAssistantRequestContent {
            name,
            description: None,
            input: None,
            knowledge_base_ids: None,
            ruleset_ids: None,
            structure_ids: None,
        }
    }
}

