/*
 * Griptape Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-09-19
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateIntegrationRequestContent {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "config")]
    pub config: Box<models::IntegrationConfigInputUnion>,
    #[serde(rename = "type")]
    pub r#type: models::IntegrationType,
    #[serde(rename = "structure_ids", skip_serializing_if = "Option::is_none")]
    pub structure_ids: Option<Vec<String>>,
    #[serde(rename = "assistant_ids", skip_serializing_if = "Option::is_none")]
    pub assistant_ids: Option<Vec<String>>,
}

impl CreateIntegrationRequestContent {
    pub fn new(name: String, config: models::IntegrationConfigInputUnion, r#type: models::IntegrationType) -> CreateIntegrationRequestContent {
        CreateIntegrationRequestContent {
            name,
            description: None,
            config: Box::new(config),
            r#type,
            structure_ids: None,
            assistant_ids: None,
        }
    }
}

